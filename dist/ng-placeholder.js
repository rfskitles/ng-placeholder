!function(e){function t(a){if(n[a])return n[a].exports;var i=n[a]={exports:{},id:a,loaded:!1};return e[a].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){var a,i;a=[n,t,n(1),n(2),n(3)],i=function(e,t,n,a,i){"use strict";var r=angular.module("ng-placeholder",["ngAnimate"]);r.provider("NgPlaceholderConfig",[n.PlaceholderProvider]),r.service("NgPlaceholderService",["$templateCache","NgPlaceholderConfig",a.PlaceholderService.getInstant]),r.directive("ngPlaceholder",["$animate","NgPlaceholderService",i.PlaceholderDirective])}.apply(t,a),!(void 0!==i&&(e.exports=i))},function(e,t,n){var a,i;a=[n,t],i=function(e,t){"use strict";var n=function(){function e(e,t,n,a){void 0===e&&(e=[]),void 0===n&&(n=!0),void 0===a&&(a="ng-cloak"),this.configs=e,this["default"]=t,this.enable=n,this.className=a}return e.prototype.getTemplates=function(){return this.configs},e.prototype.getDefaultTemplate=function(){return this["default"]},e.prototype.getClassName=function(){return this.className},e.prototype.isEnabled=function(){return this.enable},e}();t.ConfigService=n;var a=function(){function e(){this.configs=new Array,this.customClass="ng-placeholder-hide",this.defaultConfig={template_id:"default",template_html:"<p>Loading...</p>",template_repeats:1}}return e.prototype.addConfig=function(e){this.configs.push(e)},e.prototype.setConfigs=function(e){this.configs=e},e.prototype.setCustomClass=function(e){this.customClass=e},e.prototype.setDefaultConfig=function(e){this.defaultConfig=e},e.prototype.enable=function(){this.active=!0},e.prototype.disable=function(){this.active=!1},e.prototype.$get=function(){return new n(this.configs,this.defaultConfig,this.active,this.customClass)},e}();t.PlaceholderProvider=a}.apply(t,a),!(void 0!==i&&(e.exports=i))},function(e,t,n){var a,i;a=[n,t],i=function(e,t){"use strict";var n=function(){function e(e,t,n){this.configs=e,this.defaultConfig=t,this.className=n}return e.getInstant=function(t,n){if(angular.isUndefined(e.instant)){var a=n.getDefaultTemplate(),i=e.compileConfigs(n.getTemplates(),t),r=e.buildConfig(a.template_id,a.template_html,a.template_repeats);e.instant=new e(i,r,n.getClassName())}return e.instant},e.getTemplateHtml=function(e,t){return t.get(e)},e.repeatTemplate=function(e,t){var n=angular.copy(e);t-=1;for(var a=0;a<t;a++)n+=e;return n},e.buildConfig=function(t,n,a){var i=e.repeatTemplate(n,a);return{template_id:t,template_html:n,template_repeat:a,template_compiled:angular.element(i)}},e.compileConfigs=function(t,n){var a,i,r,o,l=new Array;return t.forEach(function(t){i=t.template_id,r=e.getTemplateHtml(t.template_path,n)||t.template_html,o=t.template_repeats||1,a=e.buildConfig(i,r,o),l.push(a)}),l},e.prototype.repeatTemplate=function(t,n){if(t.template_repeat===n||angular.isUndefined(n))return t.template_compiled;var a=e.repeatTemplate(t.template_html,n);return angular.element(a)},e.prototype.getTemplate=function(e,t){var n=this,a=n.defaultConfig.template_compiled;return n.configs.forEach(function(i){if(i.template_id===e)return void(a=n.repeatTemplate(i,t))}),a},e.prototype.getClassName=function(){return this.className},e}();t.PlaceholderService=n}.apply(t,a),!(void 0!==i&&(e.exports=i))},function(e,t,n){var a,i;a=[n,t],i=function(e,t){"use strict";function n(e,t){return{transclude:"element",link:function(e,n,a,i,r){var o,l=a.templateId,s=parseInt(a.templateRepeats,10),p=t.getTemplate(l,s),c=t.getClassName();r(e,function(e,t){o=e.children();for(var a=0;a<o.length;a++)o[a]=angular.element(o[a]),o[a].addClass(c);e.append(p),n.replaceWith(e)}),a.$observe("showUntil",function(e){if("true"===e){for(var t=0;t<o.length;t++)o[t].removeClass(c);p.remove()}})}}}t.PlaceholderDirective=n}.apply(t,a),!(void 0!==i&&(e.exports=i))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,